package textExcel;

// Update this file with your own code.

public class Spreadsheet implements Grid{

	Cell[][]spreadsheet=new Cell[getRows()][getCols()];
	public Spreadsheet(){
		
		for(int i = 0; i< spreadsheet.length; i++){
			for(int j = 0; j<spreadsheet[j].length; j++){
				spreadsheet[i][j]= new EmptyCell();
			}
		}
		
		
		
		
	}
	@Override
/*
	public String processCommand(String command)
	{
		
		
		String[] arr= command.split(" ");
		 
		if(command.equals("")){
			return command;
		}
		
		else if(command.equalsIgnoreCase("clear")){ 
			clearSheet();
			return getGridText();
		}
		else if(arr.length==2){
			String loc= arr[1];
			SpreadsheetLocation loc1 = new SpreadsheetLocation(loc);
			spreadsheet[loc1.getRow()][loc1.getCol()]= new EmptyCell();
			return getGridText();
			
		}
		
		else if(command.contains("\"")){
			String[] split = command.split(" = ");
			String loc= split[0];
			String input= split[1];
			SpreadsheetLocation loc1 = new SpreadsheetLocation(loc);
			
			if(split.length >= 3){
				System.out.println(input += " = " + split[2]);
			}
			spreadsheet[loc1.getRow()][loc1.getCol()] = new TextCell(input.substring(1, input.length()-1));
			return getGridText();
			
		}
		
		
		else if(arr[1].equals ("=")){
			SpreadsheetLocation location= new SpreadsheetLocation(arr[0]);
			if(arr[2].substring(arr[2].length()-1).equals("%")){
				PercentCell percentCell = new PercentCell(arr[2].trim());
				spreadsheet[location.getRow()][location.getCol()]= percentCell;
			}	
			else if(arr[2].charAt(0) == 34){
				TextCell textCell = new TextCell(arr[2].trim());
				spreadsheet[location.getRow()][location.getCol()]= textCell;
				
			}
			else if(arr[2].charAt(0) == ('(')){
				FormulaCell formulaCell= new FormulaCell(arr[2].trim());
				spreadsheet[location.getRow()][location.getCol()]= formulaCell;
			}
			else{
				ValueCell valueCell = new ValueCell(arr[2].trim());
				spreadsheet[location.getRow()][location.getCol()]= valueCell;
			}
			return getGridText();	
		}		
		else if(arr.length==1){
				SpreadsheetLocation locspect= new SpreadsheetLocation(command);
				return spreadsheet[locspect.getRow()][locspect.getCol()].fullCellText();			
				
				
		}
		
		else if(command.equalsIgnoreCase("clear ")){
			String loca = arr[1];
			SpreadsheetLocation location= new SpreadsheetLocation(loca);
			spreadsheet[location.getRow()][location.getCol()]=new EmptyCell();
			
			return getGridText();
		}	
		else if(arr.length<=3){
			SpreadsheetLocation loc = new SpreadsheetLocation(command);
			return spreadsheet[loc.getRow()][loc.getCol()].fullCellText();
		}
		
		return command;
	}
*/

	
	public String processCommand(String command)
	{
		/*
		if(command.equals("")){
			return command;
		}
		
		String[] splitCommand=command.split(" ");
		//for clearing whole spreadsheet or individual cell
		if(splitCommand[0].toUpperCase().equals("CLEAR")){
		//for loop to make everything empty cell
			if(splitCommand.length==1){
				for(int i=0;i<getRows();i++){
					for(int j=0;j<getCols();j++){
						spreadsheet[i][j]=new EmptyCell();
					}
				}
			}else{		//only one designated cell gets cleared
				splitCommand[1]=splitCommand[1].toUpperCase(); //use .toUpperCase() because splitCommand[1] might be a1, which is lower case
				SpreadsheetLocation low= new SpreadsheetLocation(splitCommand[1]);
				spreadsheet[low.getRow()][low.getCol()]=new EmptyCell();
			}
			return getGridText();
		}
		
		
		String[] threePartCommand=command.split(" ",3); //split to 3 because the value assigned or trying to be assigned to cell may have spaces. 
		command=command.substring(0, 1).toUpperCase()+command.substring(1);
		
		if(command.charAt(0)>(int)'A'-1 && command.charAt(0)<(int)'L'+1){
			//Inspecting cell-return value at the cell
			SpreadsheetLocation cell=new SpreadsheetLocation(splitCommand[0].toUpperCase());		//splitCommand[0] is cellName as defined in constructor of SpreadsheetLocation
			if(splitCommand.length==1){
				String cellInspecContents=spreadsheet[cell.getRow()][cell.getCol()].fullCellText();
				return cellInspecContents;
			}
			//assigning TextCell to spreadsheet and then returning it
			if(splitCommand.length>1){			
				if(threePartCommand[1].equals("=")){			
					if(threePartCommand[2].charAt(0)=='"'){			//TextCell has "" around the string
						spreadsheet[cell.getRow()][cell.getCol()]=new TextCell(threePartCommand[2]);
						String newSheet=this.getGridText();
						return newSheet;
					}
					else if(command.charAt(command.length()-1)=='%'){		//PercentCell has % at the end
						spreadsheet[cell.getRow()][cell.getCol()]=new PercentCell(threePartCommand[2]);
						String newSheet=this.getGridText();
						return newSheet;
					}
					else if(command.charAt(0)=='('){				//FormulaCell has () around the formula
						spreadsheet[cell.getRow()][cell.getCol()]=new FormulaCell(threePartCommand[2]);
						String newSheet=this.getGridText();
						return newSheet;
					}else{											//else statement will go directly to ValueCell
						spreadsheet[cell.getRow()][cell.getCol()]=new ValueCell(threePartCommand[2]);
						String newSheet=this.getGridText();
						return newSheet;
					}
				}	
				
			}
			*/
		// split the command at spaces
				String[] splitted = command.split(" ");
				SpreadsheetLocation loc;
				
				
				
				if(command.equals("")){
					return command;
				}
				// if the command is to clear the entire sheet
				else if(command.toLowerCase().equals("clear")){ // change the command to lower case to get rid of case issues
					for(int i = 0; i < getRows(); i++){
						for(int j = 0; j < getCols(); j++){
							spreadsheet[i][j] = new EmptyCell();
						}
					}
					return getGridText();	
				}
				// if the command is to clear a specific cell
				else if(splitted.length == 2){
					String location = splitted[1];
					loc = new SpreadsheetLocation(location);
					spreadsheet[loc.getRow()][loc.getCol()] = new EmptyCell();
					return getGridText();
				}
				// if the command is to assign something to a cell
				else if(command.contains("\"")){
					String[] splitInput = command.split(" = ");
					String location = splitInput[0];
					String value = splitInput[1];
					if(splitInput.length >= 3){
						System.out.println(value += " = " + splitInput[2]);
					}
					loc = new SpreadsheetLocation(location);
					spreadsheet[loc.getRow()][loc.getCol()] = new TextCell(value.substring(1, value.length()-1)); // pass in without the quotes
			    	return getGridText(); 
				}	
				else if(splitted.length>1&&splitted[1].equals("=")){
					loc=new SpreadsheetLocation(splitted[0]);
					if (splitted[2].charAt(0) == 34){ //a text cell
						spreadsheet [loc.getRow()] [loc.getCol()] = new TextCell (splitted[2].trim());
					}
					else if (splitted[2].substring(splitted[2].length()-1).equals("%")){ //a percent cell
						spreadsheet [loc.getRow()] [loc.getCol()] = new PercentCell (splitted[2].trim());	
					}
					else if (splitted[2].charAt(0) == ('(')){ //a formula cell
						spreadsheet [loc.getRow()] [loc.getCol()] = new FormulaCell (splitted[2].trim());	
					}
					else { //a value cell
						spreadsheet [loc.getRow()] [loc.getCol()] = new ValueCell (splitted[2].trim());	
					}
					return getGridText();
				} 	
				else {
					loc = new SpreadsheetLocation(command);
					return spreadsheet[loc.getRow()][loc.getCol()].fullCellText();
				}
		
		
			
		
		
		
	}
	
	
	
	
	
	@Override
	public int getRows()
	{
		// TODO Auto-generated method stub
		return 20;
	}

	public void clearSheet(){
		for(int i = 0; i < 20; i++){
			for(int j = 0; j < 12; j++){
				spreadsheet[i][j] = new EmptyCell();
			}
		}
	}
	
	@Override
	public int getCols()
	{
		// TODO Auto-generated method stub
		return 12;
	}

	@Override
	public Cell getCell(Location loc)
	{
		int row = loc.getRow();
		int column = loc.getCol();
		return spreadsheet[row][column];
		
	}

	@Override
	public String getGridText()
	{
		
		
			String grid = "   |";
			for(int i=0; i < getCols(); i++){
				grid += (char) (i + 'A') + "         |";
			}
			grid += "\n";
		
			for(int i=1; i <= getRows(); i++){
				if(i > 9){
					grid += i + " ";
				}
				if(i < 10){
					grid += i + "  ";
				}
				for(int j=0; j < getCols(); j++){
					grid += "|" + spreadsheet[i-1][j].abbreviatedCellText();
				}
				grid += "|\n";
			}
			return grid;
		
	
		
		
		
		
	
	}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
